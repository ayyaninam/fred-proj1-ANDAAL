# Generated by Django 4.1.4 on 2024-04-03 02:21

import datetime
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import phonenumber_field.modelfields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('catalogue', '0028_category_main_book_category'),
    ]

    operations = [
        migrations.CreateModel(
            name='CultureCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
                ('default', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='EducationCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
                ('default', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='FooterDetail',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.EmailField(blank=True, max_length=254, null=True)),
                ('phone_number', models.CharField(blank=True, max_length=200, null=True)),
                ('short_description', models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='FooterImportantLinks',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('detail', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='RateOfEuro',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('base', models.CharField(blank=True, max_length=200, null=True)),
                ('date', models.DateField(default=datetime.date.today, verbose_name='Date')),
                ('xaf_to_euro', models.FloatField()),
            ],
            options={
                'ordering': ['-date'],
            },
        ),
        migrations.CreateModel(
            name='TextbookClasses',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('products_category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='catalogue.category')),
            ],
        ),
        migrations.CreateModel(
            name='TextbookLanguages',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='TextbooksCategories',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
                ('child_classes', models.ManyToManyField(to='base.textbookclasses')),
                ('language_associated', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='base.textbooklanguages')),
            ],
        ),
        migrations.CreateModel(
            name='ShippingMethod',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=250)),
                ('code', models.CharField(blank=True, help_text="Please don't give any space in this field", max_length=250, null=True)),
                ('charge_excl_tax', models.IntegerField(blank=True, null=True)),
                ('charge_incl_tax', models.IntegerField(blank=True, null=True)),
                ('child_of', models.ForeignKey(blank=True, help_text='If you choose this, then this will become a child (not a parent)', null=True, on_delete=django.db.models.deletion.CASCADE, to='base.shippingmethod')),
            ],
        ),
        migrations.CreateModel(
            name='MainMenu',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('icons_link', models.TextField(blank=True, help_text='Please go to the link: fonts.google.com/icons and attach the code which is under the "Inserting the icon" menu after slecting the icon.', max_length=200, null=True)),
                ('redirect_to_link', models.CharField(blank=True, help_text='Please write the url like /abc/abc/1, do not include any domain or IP address before the URL. This url will redirect users to this LINK. Please keep it blank if you want to attached any category to the main menu and select the category in below field(name "Category Attached")', max_length=1000, null=True)),
                ('category_attached', models.ForeignKey(blank=True, help_text="Please choose the Category if you don't attach any redirect link, if you will attach the both, priority will be for Category field.", null=True, on_delete=django.db.models.deletion.CASCADE, to='catalogue.category')),
            ],
        ),
        migrations.CreateModel(
            name='Education',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('owner_or_institution_name', models.CharField(default='admin', max_length=250)),
                ('title', models.CharField(max_length=250)),
                ('short_description', models.TextField()),
                ('cover_image', models.ImageField(blank=True, null=True, upload_to='base/education_cover/')),
                ('description', models.TextField()),
                ('date', models.DateField(auto_now=True)),
                ('location', models.CharField(blank=True, max_length=255, null=True)),
                ('link_to_orignal', models.URLField(max_length=1000)),
                ('category', models.ManyToManyField(to='base.educationcategory')),
            ],
            options={
                'ordering': ('-date',),
            },
        ),
        migrations.CreateModel(
            name='Culture',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('owner_or_institution_name', models.CharField(default='admin', max_length=250)),
                ('title', models.CharField(max_length=250)),
                ('short_description', models.TextField()),
                ('cover_image', models.ImageField(blank=True, null=True, upload_to='base/culture_cover/')),
                ('description', models.TextField()),
                ('date', models.DateField()),
                ('location', models.CharField(blank=True, max_length=255, null=True)),
                ('link_to_orignal', models.URLField(max_length=1000)),
                ('recommended', models.BooleanField(default=False)),
                ('category', models.ManyToManyField(to='base.culturecategory')),
            ],
            options={
                'ordering': ('-date',),
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email address')),
                ('first_name', models.CharField(blank=True, max_length=255, verbose_name='First name')),
                ('last_name', models.CharField(blank=True, max_length=255, verbose_name='Last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='Staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='Active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('phone_number', phonenumber_field.modelfields.PhoneNumberField(blank=True, max_length=128, null=True, region=None, verbose_name='Phone number')),
                ('username', models.CharField(blank=True, max_length=1000, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
                'abstract': False,
            },
        ),
    ]
